extends layout

block content
    -var parsedData = JSON.stringify(data, replacer);
    script.
        var serviceName = '#{serviceName}';
        var service = '#{service}'
        if(location.href.indexOf('converter') != -1)
            location.href = location.href.replace('converter', service);
        localStorage.setItem("service", service);
        if(localStorage.getItem(service + "_collapses") == null)
            localStorage.setItem(service + "_collapses", JSON.stringify({ids : []}));
        clearFoundResultsFromStorage();
        if(localStorage.getItem(service + "_listState") == null)
            localStorage.setItem(service + "_listState",JSON.stringify(
                    {
                        collapsed: false,
                        expanded: false
                    }
            ));

        navigator.webkitPersistentStorage.requestQuota(10*1024*1024, function (bytes) {
            window.webkitRequestFileSystem(window.PERSISTENT, bytes, function (fs) {
                console.log("storage is ready");
                fs.root.getDirectory(serviceName, {create:true}, function(directory){
                    directory.getFile('oldData.json', {create: true}, function(file){
                        file.remove(function(){
                            directory.getFile('oldData.json', {create: true}, function(newFile) {
                                newFile.createWriter(function(writer){
                                    writer.onwriteend = function(error){
                                        if(error)
                                            console.log(error);
                                        else{
                                            console.log("done");
                                        }
                                    };
                                    var blob = new Blob(['!{parsedData}'], {type: 'application/json'});
                                    writer.write(blob);
                                })
                            })
                        });

                    })
                })
            }, function(err){if(err)
                console.log(err)});
        }, function(err){if(err)
            console.log(err)});
    .headerWrapper
        .listItemWrapper
            .topItemWrapper
                p.topItemText #{serviceName}
                p.counter
                    | (
                    span(id="root_indexInput") #{weight.done}/#{weight.all}
                    | )
        .buttonsWrapper
            div
                .searchWrapper
                    input#Search(onkeypress="search(event)")
                    input.button.search(id='NextValueButton', type='button', value='', onclick="search()")
                input.button.collapseAll(type='button', value='', onclick='collapseAllByClick()')
                input.button.expandAll(type='button', value='', onclick='expandAllByClick()')
                input.button.edit(type='button', value='', onclick='editDataFile()')
                input.button.saveAll(id='saveButton', name=serviceName, type='submit', value='', onclick='unmarkAllItems(); saveByButton()')
    mixin drawBlock(data)
        each item,index in data
            - var id=item.id
            - var hasChildren = item.children!=null;
            - var priority;
            - if(item.priority==null || item.priority<=0 || item.priority>=6)
                - priority = "priorityDefault"
            - else
                - priority = "priority" + item.priority;

            li(id=id, class="listItemId"+(index==data.length-1 ? " last" : "") )
                .grayLinesBlock
                    div(class="listItemWrapper" + (!hasChildren ? " noChild": ""))
                        .checkboxAndMarkerWrapper
                            input(id=id+"_Checkbox", class="checkbox", type="checkbox", onclick="markChangedItem(this.id); changeCheckboxes(this.id); changeWeights(this.id)", checked=item.isDone)
                            em(id=id+"_Marker", class="marker close" + (hasChildren!=true ? " hidden" : ""), onclick="collapseElementAndChangeState(this.id)")
                        .itemMessageWrapper
                            .hintContainer
                                progress(id=id+"_ProgressBar", class="progressBar", value=item.weight.done, max=item.weight.all)
                                br
                                span(id=id+"_Hint", span class="hintText") #{item.weight.done}/#{item.weight.all}
                            div(id=id+"_DropWrapper", class="dropdownWrapper")
                                button(id=id+"_PriorityButton", class="dropButton "+ priority, onclick="switchDropdownList(this.id)")
                                div(id=id+"_PriorityDropDown", class="dropContent hidden")
                                    each val, index in {0:'Default', 1:'1', 2:'2', 3:'3', 4:'4', 5:'5'}
                                        a(id=id+"_dropLink"+val, class="dropLink priority"+val, onclick="setPriority(this.id)")
                            a(id=id+"_Item", class="itemName " + (hasChildren? "listItemLink" : "listItem"), onclick=hasChildren ? "collapseElementAndChangeState(this.id)" :"", onselectstart="return false", onmousedown="return false") #{item.name}
                            input(id=id+"_indexInput", class="textInput index" + (hasChildren==true ? " hidden" : ""), type="text", value=item.weight.done+"/"+item.weight.all, onchange="updateProgressBar(this.id); changeWeights(this.id); markChangedItem(this.id)")
                            input(id=id+"_commentInput", class="textInput comment", type="text", value=item.comment, oninput="markChangedItem(this.id)")
                if item.children
                    ul(id=item.id+"_ChildrenUl", class="subList hidden")
                        +drawBlock(item.children)
    #mainWrapper
        ul#root_ChildrenUl
            +drawBlock(data)