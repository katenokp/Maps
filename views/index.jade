extends layout

block content
    -var parsedData = JSON.stringify(data, replacer);
    script.
        var serviceName = '#{serviceName}';
        var service = '#{service}';
        createListState(service);

        navigator.webkitPersistentStorage.requestQuota(10*1024*1024, function (bytes) {
            window.webkitRequestFileSystem(window.PERSISTENT, bytes, function (fs) {
                console.log("storage is ready");
                fs.root.getDirectory(serviceName, {create:true}, function(directory){
                    directory.getFile('oldData.json', {create: true}, function(file){
                        file.remove(function(){
                            directory.getFile('oldData.json', {create: true}, function(newFile) {
                                newFile.createWriter(function(writer){
                                    writer.onwriteend = function(error){
                                        if(error)
                                            console.log(error);
                                        else{
                                            console.log("done");
                                        }
                                    };
                                    var blob = new Blob(['!{parsedData}'], {type: 'application/json'});
                                    writer.write(blob);
                                })
                            })
                        });

                    })
                })
            }, function(err){if(err)
                console.log(err)});
        }, function(err){if(err)
            console.log(err)});
    .headerWrapper
        .listItemWrapper
            .topItemWrapper
                p.topItemText #{serviceName}
                p.counter
                    | (
                    span(id="root_indexInput") #{weight.done}/#{weight.all}
                    | )
                .usersListWrapper
                    .userIcon.topUserIcon.user1
                    .userIcon.topUserIcon.user2
        .buttonsWrapper
            div
                .searchWrapper
                    input#Search(onkeypress="search(event)")
                    input.button.search(id='NextValueButton', type='button', value='', onclick="search()")
                input#collapseAllButton.button.collapseAll(type='button', value='', onclick='collapseAllByClick()')
                input#expandAllButton.button.expandAll(type='button', value='', onclick='expandAllByClick()')
                input.button.edit(type='button', value='', onclick='editDataFile()')
                input.button.saveAll(id='saveButton', name=serviceName, type='submit', value='', onclick='unmarkAllItems(); saveByButton()')
    mixin drawBlock(data)
        each item,index in data
            - var id=item.id
            - var hasChildren = item.children!=null;
            - var priority;
            - if(item.priority==null || item.priority<=0 || item.priority>=6)
                - priority = "priorityDefault"
            - else
                - priority = "priority" + item.priority;

            li(id=id, class="listItemId"+(index==data.length-1 ? " last" : "") )
                .grayLinesBlock
                    div(class="listItemWrapper" + (!hasChildren ? " noChild": ""))
                        .checkboxAndMarkerWrapper
                            input(id=id+"_Checkbox", class="checkbox", type="checkbox", onclick="markChangedItem(this.id); changeCheckboxes(this.id); changeWeights(this.id)", checked=item.isDone)
                            em(id=id+"_Marker", class="marker close" + (hasChildren!=true ? " hidden" : ""), onclick="collapseOrExpandElementByClick(this.id, event)")
                        .itemMessageWrapper
                            .dropDownWrapper.users(id=id+"_User_DropWrapper")
                                button(id=id+"_User_Button", class="dropButton user userDefault", onclick="switchDropDownList(this.id, 'User')")
                                div(id=id+"_User_DropDown",  class="dropContent user hidden")
                                    each val, index in {0:'Default', 1:'1', 2:'2'}
                                        a(id=id+"_User_dropLink"+val, class="dropLink user user" + val, onclick="setDropDownValue(this.id, 'User')")
                            .hintContainer
                                progress(id=id+"_ProgressBar", class="progressBar", value=item.weight.done, max=item.weight.all)
                                br
                                span(id=id+"_Hint", span class="hintText") #{item.weight.done}/#{item.weight.all}
                            div(id=id+"_DropWrapper", class="dropDownWrapper priority")
                                button(id=id+"_Priority_Button", class="dropButton priority "+ priority, onclick="switchDropDownList(this.id, 'Priority')")
                                div(id=id+"_Priority_DropDown", class="dropContent priority hidden")
                                    each val, index in {0:'Default', 1:'1', 2:'2', 3:'3', 4:'4', 5:'5'}
                                        a(id=id+"_dropLink"+val, class="dropLink priority priority"+val, onclick="setDropDownValue(this.id, 'Priority')")
                            a(id=id+"_Item", class="itemName " + (hasChildren? "listItemLink" : "listItem"), onclick=hasChildren ? "collapseOrExpandElementByClick(this.id, event)" :"", onselectstart="return false", onmousedown="return false") #{item.name}
                            input(id=id+"_indexInput", class="textInput index" + (hasChildren==true ? " hidden" : ""), type="text", value=item.weight.done+"/"+item.weight.all, onchange="updateProgressBar(this.id); changeWeights(this.id); markChangedItem(this.id)")
                            input(id=id+"_commentInput", class="textInput comment", type="text", value=item.comment, oninput="markChangedItem(this.id)")
                if item.children
                    ul(id=item.id+"_ChildrenUl", class="subList hidden")
                        +drawBlock(item.children)
    #mainWrapper
        ul#root_ChildrenUl
            +drawBlock(data)